/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\restraunt_test.glb --shadows -t 
*/

import * as THREE from "three";
import React, { useMemo, useRef, useState } from "react";
import { Outlines, useGLTF } from "@react-three/drei/native";
import { GLTF } from "three-stdlib";
import { Asset } from "expo-asset";
import { ThreeEvent } from "@react-three/fiber/native";

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    group82117970: THREE.Mesh;
    group1352653514: THREE.Mesh;
    board_cutting_board001_Cube117: THREE.Mesh;
    ["(%ignore)"]: THREE.Mesh;
    Cube015: THREE.Mesh;
    Mesh_slice5: THREE.Mesh;
    Mesh_slice5_1: THREE.Mesh;
    Mesh_slice5_2: THREE.Mesh;
  };
  materials: {
    square_tiles: THREE.MeshStandardMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    ["Solid.092"]: THREE.MeshStandardMaterial;
    PaletteMaterial004: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshStandardMaterial;
  };
};

export function Restaurant(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    Asset.fromModule(require("../../assets/models/restraunt.glb")).uri
  ) as GLTFResult;

  const clonedMat = useMemo(() => {
    return materials.PaletteMaterial003.clone();
  }, []);

  const [selectedInstanceId, setSelectedInstanceId] = useState<number | null>(
    null
  );
  const instancedMeshRef = useRef<THREE.InstancedMesh>(null);
  const selectedInstanceInfo = useRef({
    position: new THREE.Vector3(),
    rotation: new THREE.Quaternion(),
  });

  const handleClick = (event: ThreeEvent<MouseEvent>) => {
    const instanceId = event.instanceId ?? null; // Get the clicked instance's ID
    if (instancedMeshRef.current && instanceId !== null) {
      const instanceMatrix = new THREE.Matrix4();
      instancedMeshRef.current.getMatrixAt(instanceId, instanceMatrix);

      const position = new THREE.Vector3();
      const rotation = new THREE.Quaternion();
      instanceMatrix.decompose(position, rotation, new THREE.Vector3());
      selectedInstanceInfo.current.position.copy(position);
      selectedInstanceInfo.current.rotation.copy(rotation);
      setSelectedInstanceId(instanceId);
    }
  };

  return (
    <>
      <group {...props} dispose={null}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane.geometry}
          material={materials.square_tiles}
          position={[-2.372, -2.5, -0.944]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.group82117970.geometry}
          material={materials.PaletteMaterial001}
          position={[7.288, 0.298, 4.856]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.group1352653514.geometry}
          material={materials.PaletteMaterial002}
          position={[8.447, -0.995, 3.939]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.board_cutting_board001_Cube117.geometry}
          material={materials["Solid.092"]}
          position={[-3.283, 0.095, -2.358]}
          scale={0.214}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["(%ignore)"].geometry}
          material={materials.PaletteMaterial004}
          position={[-8.797, 0.537, -13.633]}
          rotation={[0, -Math.PI / 2, 0]}
          scale={2.317}
        />
        <instancedMesh
          args={[nodes.Cube015.geometry, materials.PaletteMaterial003, 14]}
          castShadow
          receiveShadow
          instanceMatrix={nodes.Cube015.instanceMatrix}
          onClick={handleClick}
          ref={instancedMeshRef}
        />
        {/* <instancedMesh
          args={[nodes.Mesh_slice5.geometry, materials.PaletteMaterial001, 8]}
          castShadow
          receiveShadow
          instanceMatrix={nodes.Mesh_slice5.instanceMatrix}
        />
        <instancedMesh
          args={[nodes.Mesh_slice5_1.geometry, materials.PaletteMaterial001, 8]}
          castShadow
          receiveShadow
          instanceMatrix={nodes.Mesh_slice5_1.instanceMatrix}
        />
        <instancedMesh
          args={[nodes.Mesh_slice5_2.geometry, materials.PaletteMaterial001, 8]}
          castShadow
          receiveShadow
          instanceMatrix={nodes.Mesh_slice5_2.instanceMatrix}
        /> */}
        {selectedInstanceId !== null && (
          <Outlines
            color="aquamarine"
            opacity={1}
            thickness={100}
            angle={Math.PI / 4}
          >
            <mesh
              geometry={nodes.Cube015.geometry}
              material={clonedMat}
              position={selectedInstanceInfo.current.position.toArray()}
              quaternion={selectedInstanceInfo.current.rotation.toArray()}
            />
          </Outlines>
        )}
      </group>
    </>
  );
}

useGLTF.preload(
  Asset.fromModule(require("../../assets/models/restraunt.glb")).uri
);
